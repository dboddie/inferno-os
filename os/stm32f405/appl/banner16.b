implement Banner;

include "draw.m";
include "sys.m";

BUFSIZE: con 160;

Banner: module
{
    init:   fn(nil: ref Draw->Context, args: list of string);
};

init(nil: ref Draw->Context, args: list of string)
{
    sys := load Sys Sys->PATH;
    stdout := sys->fildes(1);

    if (len args == 1) {
        sys->fprint(sys->fildes(2), "usage: banner <text>\n");
        return;
    }

    args = tl args;

    f := sys->fildes(1);
    if (f == nil) {
        sys->fprint(sys->fildes(2), "can't write data\n");
        return;
    }

    glyphs := array[760] of {
        16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, # <space>
        16r00100000, 16r00100010, 16r00100010, 16r00100010, 16r00000010, 16r00100000, 16r00000010, 16r00000000, # !
        16r006C0000, 16r00240048, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, # "
        16r00000000, 16r00440000, 16r004400FE, 16r00440044, 16r004400FE, 16r00000000, 16r00000000, 16r00000000, # #
        16r00100000, 16r001200FC, 16r00120012, 16r0090007C, 16r00920090, 16r0010007E, 16r00000000, 16r00000000, # $
        16r00000000, 16r008A0004, 16r0024004A, 16r00480010, 16r00A200A4, 16r00000040, 16r00000000, 16r00000000, # %
        16r00180000, 16r00240024, 16r00180024, 16r00240014, 16r004200A2, 16r00BC0042, 16r00000000, 16r00000000, # &
        16r00180000, 16r00080010, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, # '
        16r00100020, 16r00080010, 16r00080008, 16r00080008, 16r00100008, 16r00200010, 16r00000000, 16r00000000, # (
        16r00100008, 16r00200010, 16r00200020, 16r00200020, 16r00100020, 16r00080010, 16r00000000, 16r00000000, # )
        16r00000000, 16r00100000, 16r00FE0010, 16r00280038, 16r00000044, 16r00000000, 16r00000000, 16r00000000, # *
        16r00000000, 16r00100000, 16r00100010, 16r001000FE, 16r00100010, 16r00000000, 16r00000000, 16r00000000, # +
        16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00180000, 16r00080010, 16r00000000, # ,
        16r00000000, 16r00000000, 16r00000000, 16r000000FE, 16r00000000, 16r00000000, 16r00000000, 16r00000000, # -
        16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00180000, 16r00000018, 16r00000000, # .
        16r00000000, 16r00000000, 16r00400080, 16r00100020, 16r00040008, 16r00000002, 16r00000000, 16r00000000, # /
        16r00000000, 16r0042003C, 16r00A100C1, 16r00890091, 16r00830085, 16r003C0042, 16r00000000, 16r00000000, # 0
        16r00000000, 16r00180010, 16r00100014, 16r00100010, 16r00100010, 16r007C0010, 16r00000000, 16r00000000, # 1
        16r00000000, 16r0042003C, 16r00400040, 16r00100020, 16r00040008, 16r00FE0002, 16r00000000, 16r00000000, # 2
        16r00000000, 16r0082007C, 16r00800080, 16r00800078, 16r00800080, 16r007C0082, 16r00000000, 16r00000000, # 3
        16r00000000, 16r00280030, 16r00220024, 16r00FE0022, 16r00200020, 16r00200020, 16r00000000, 16r00000000, # 4
        16r00000000, 16r000200FE, 16r00020002, 16r0080007E, 16r00800080, 16r007C0082, 16r00000000, 16r00000000, # 5
        16r00000000, 16r0002007C, 16r00020002, 16r0082007E, 16r00820082, 16r007C0082, 16r00000000, 16r00000000, # 6
        16r00000000, 16r008000FE, 16r00400080, 16r00100020, 16r00040008, 16r00040004, 16r00000000, 16r00000000, # 7
        16r00000000, 16r0082007C, 16r00820082, 16r0082007C, 16r00820082, 16r007C0082, 16r00000000, 16r00000000, # 8
        16r00000000, 16r0082007C, 16r00820082, 16r008000FC, 16r00800080, 16r007C0082, 16r00000000, 16r00000000, # 9
        16r00000000, 16r00000000, 16r00180000, 16r00000018, 16r00180000, 16r00000018, 16r00000000, 16r00000000, # :
        16r00000000, 16r00000000, 16r00180000, 16r00000018, 16r00180000, 16r00080010, 16r00000000, 16r00000000, # ;
        16r00000000, 16r00200040, 16r00080010, 16r00020004, 16r00080004, 16r00200010, 16r00000040, 16r00000000, # <
        16r00000000, 16r00000000, 16r007C0000, 16r00000000, 16r0000007C, 16r00000000, 16r00000000, 16r00000000, # =
        16r00000000, 16r00040002, 16r00100008, 16r00400020, 16r00100020, 16r00040008, 16r00000002, 16r00000000, # >
        16r00000000, 16r0082007C, 16r00800080, 16r00100060, 16r00100010, 16r00100000, 16r00000000, 16r00000000, # ?
        16r00000000, 16r003C0000, 16r00420042, 16r004A0072, 16r00020072, 16r0000007C, 16r00000000, 16r00000000, # @
        16r00000000, 16r0082007C, 16r00820082, 16r008200FE, 16r00820082, 16r00820082, 16r00000000, 16r00000000, # A
        16r00000000, 16r0082007E, 16r00820082, 16r0082007E, 16r00820082, 16r007E0082, 16r00000000, 16r00000000, # B
        16r00000000, 16r00840078, 16r00020002, 16r00020002, 16r00020002, 16r00780084, 16r00000000, 16r00000000, # C
        16r00000000, 16r0042003E, 16r00820082, 16r00820082, 16r00820082, 16r003E0042, 16r00000000, 16r00000000, # D
        16r00000000, 16r000200FE, 16r00020002, 16r0002003E, 16r00020002, 16r00FE0002, 16r00000000, 16r00000000, # E
        16r00000000, 16r000200FE, 16r00020002, 16r0002003E, 16r00020002, 16r00020002, 16r00000000, 16r00000000, # F
        16r00000000, 16r00840078, 16r00020002, 16r00E20002, 16r00820082, 16r007800C4, 16r00000000, 16r00000000, # G
        16r00000000, 16r00820082, 16r00820082, 16r008200FE, 16r00820082, 16r00820082, 16r00000000, 16r00000000, # H
        16r00000000, 16r0010007C, 16r00100010, 16r00100010, 16r00100010, 16r007C0010, 16r00000000, 16r00000000, # I
        16r00000000, 16r002000FC, 16r00200020, 16r00200020, 16r00200020, 16r001C0022, 16r00000000, 16r00000000, # J
        16r00000000, 16r00220042, 16r000A0012, 16r000A000E, 16r00220012, 16r00820042, 16r00000000, 16r00000000, # K
        16r00000000, 16r00020002, 16r00020002, 16r00020002, 16r00020002, 16r00FE0002, 16r00000000, 16r00000000, # L
        16r00000000, 16r00C60082, 16r009200AA, 16r00820092, 16r00820082, 16r00820082, 16r00000000, 16r00000000, # M
        16r00000000, 16r00820082, 16r008A0086, 16r00A20092, 16r008200C2, 16r00820082, 16r00000000, 16r00000000, # N
        16r00000000, 16r00440038, 16r00820082, 16r00820082, 16r00820082, 16r00380044, 16r00000000, 16r00000000, # O
        16r00000000, 16r0082007E, 16r00820082, 16r0002007E, 16r00020002, 16r00020002, 16r00000000, 16r00000000, # P
        16r00000000, 16r00440038, 16r00820082, 16r00820082, 16r00A20082, 16r00B80044, 16r00000000, 16r00000000, # Q
        16r00000000, 16r0082007E, 16r00820082, 16r000A007E, 16r00220012, 16r00820042, 16r00000000, 16r00000000, # R
        16r00000000, 16r0082007C, 16r00020002, 16r0080007C, 16r00800080, 16r007C0082, 16r00000000, 16r00000000, # S
        16r00000000, 16r001000FE, 16r00100010, 16r00100010, 16r00100010, 16r00100010, 16r00000000, 16r00000000, # T
        16r00000000, 16r00820082, 16r00820082, 16r00820082, 16r00820082, 16r007C0082, 16r00000000, 16r00000000, # U
        16r00000000, 16r00820082, 16r00820082, 16r00440044, 16r00280028, 16r00100010, 16r00000000, 16r00000000, # V
        16r00000000, 16r00820082, 16r00820082, 16r00920082, 16r00AA0092, 16r008200C6, 16r00000000, 16r00000000, # W
        16r00000000, 16r00820082, 16r00280044, 16r00100010, 16r00440028, 16r00820082, 16r00000000, 16r00000000, # X
        16r00000000, 16r00820082, 16r00280044, 16r00100010, 16r00100010, 16r00100010, 16r00000000, 16r00000000, # Y
        16r00000000, 16r008000FE, 16r00200040, 16r00080010, 16r00020004, 16r00FE0002, 16r00000000, 16r00000000, # Z
        16r00000000, 16r0004007C, 16r00040004, 16r00040004, 16r00040004, 16r007C0004, 16r00000000, 16r00000000, # [
        16r00000000, 16r00000000, 16r00040002, 16r00100008, 16r00400020, 16r00000080, 16r00000000, 16r00000000, # \
        16r00000000, 16r0040007C, 16r00400040, 16r00400040, 16r00400040, 16r007C0040, 16r00000000, 16r00000000, # ]
        16r00000000, 16r00280010, 16r00000044, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, # ^
        16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r000001FF, 16r00000000, # _
        16r00100000, 16r00180008, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, 16r00000000, # `
        16r00000000, 16r00000000, 16r003C0000, 16r00400040, 16r0042007C, 16r00BC0042, 16r00000000, 16r00000000, # a
        16r00000000, 16r00020002, 16r003E0002, 16r00420042, 16r00420042, 16r003E0042, 16r00000000, 16r00000000, # b
        16r00000000, 16r00000000, 16r003C0000, 16r00020042, 16r00020002, 16r003C0042, 16r00000000, 16r00000000, # c
        16r00000000, 16r00400040, 16r007C0040, 16r00420042, 16r00420042, 16r007C0042, 16r00000000, 16r00000000, # d
        16r00000000, 16r00000000, 16r003C0000, 16r00420042, 16r0002007E, 16r007C0002, 16r00000000, 16r00000000, # e
        16r00000000, 16r0042003C, 16r00020002, 16r0002001E, 16r00020002, 16r00020002, 16r00000000, 16r00000000, # f
        16r00000000, 16r00000000, 16r007C0000, 16r00420042, 16r00420042, 16r0040007C, 16r00420040, 16r0000003C, # g
        16r00000000, 16r00020002, 16r003E0002, 16r00420042, 16r00420042, 16r00420042, 16r00000000, 16r00000000, # h
        16r00000000, 16r00080008, 16r00080000, 16r00080008, 16r00080008, 16r00300008, 16r00000000, 16r00000000, # i
        16r00000000, 16r00200020, 16r00200000, 16r00200020, 16r00200020, 16r00200020, 16r00220020, 16r0000001C, # j
        16r00000000, 16r00040004, 16r00440004, 16r00140024, 16r0014000C, 16r00440024, 16r00000000, 16r00000000, # k
        16r00000000, 16r00080008, 16r00080008, 16r00080008, 16r00080008, 16r00300008, 16r00000000, 16r00000000, # l
        16r00000000, 16r00000000, 16r006E0000, 16r00920092, 16r00920092, 16r00920092, 16r00000000, 16r00000000, # m
        16r00000000, 16r00000000, 16r003E0000, 16r00420042, 16r00420042, 16r00420042, 16r00000000, 16r00000000, # n
        16r00000000, 16r00000000, 16r003C0000, 16r00420042, 16r00420042, 16r003C0042, 16r00000000, 16r00000000, # o
        16r00000000, 16r00000000, 16r003E0000, 16r00420042, 16r00420042, 16r0002003E, 16r00020002, 16r00000002, # p
        16r00000000, 16r00000000, 16r007C0000, 16r00420042, 16r00420042, 16r0040007C, 16r00C00040, 16r00000040, # q
        16r00000000, 16r00000000, 16r003E0000, 16r00020042, 16r00020002, 16r00020002, 16r00000000, 16r00000000, # r
        16r00000000, 16r00000000, 16r007C0000, 16r00020002, 16r0040003C, 16r003E0040, 16r00000000, 16r00000000, # s
        16r00000000, 16r00080008, 16r007E0008, 16r00080008, 16r00080008, 16r00700008, 16r00000000, 16r00000000, # t
        16r00000000, 16r00000000, 16r00420000, 16r00420042, 16r00420042, 16r003C0042, 16r00000000, 16r00000000, # u
        16r00000000, 16r00000000, 16r00420000, 16r00420042, 16r00240042, 16r00180024, 16r00000000, 16r00000000, # v
        16r00000000, 16r00000000, 16r00820000, 16r00820082, 16r00920092, 16r00C600AA, 16r00000000, 16r00000000, # w
        16r00000000, 16r00000000, 16r00420000, 16r00240042, 16r00240018, 16r00420042, 16r00000000, 16r00000000, # x
        16r00000000, 16r00000000, 16r00420000, 16r00420042, 16r00420042, 16r0040007C, 16r00420042, 16r0000003C, # y
        16r00000000, 16r00000000, 16r007E0000, 16r00100020, 16r00040008, 16r007E0002, 16r00000000, 16r00000000, # z
        16r00300000, 16r00080008, 16r00100008, 16r000C0010, 16r00100010, 16r00080008, 16r00300008, 16r00000000, # {
        16r00100000, 16r00100010, 16r00100010, 16r00100010, 16r00100010, 16r00100010, 16r00100010, 16r00000010, # |
        16r000C0000, 16r00100010, 16r00080010, 16r00300008, 16r00080008, 16r00100010, 16r000C0010, 16r00000000, # }
        16r00000000, 16r00000000, 16r000C0000, 16r00600092, 16r00000000, 16r00000000, 16r00000000, 16r00000000  # ~
        };

    text := hd args;
    for (args = tl args; args != nil; args = tl args) {
        s := hd args;
        text = text + " " + s;
    }

    b := array[BUFSIZE] of byte;
    c := 0;

    for (y := 0; y < 400; y += 16) {

        for (dy := 0; dy < 16; dy++) {
            i := 0;

            for (col := 0; col < 40; col++)
            {
                n: int;
                if (col < len text)
                    n = text[col];
                else
                    n = 32;

                if (n < ' ' || n > '~') n = 32;

                # Select the 32 bits for a pair of rows.
                g := glyphs[((n - 32) * 8) + (dy / 2)];

                # Obtain the bits for the current row and write the pixels.
                bits := g >> (16 * (dy % 2));

                for (mask := 1; mask != 16r10000; mask <<= 2) {
                    v := byte 16r11;

                    if ((bits & mask) != 0)
                        v |= byte (2 << 4);

                    if ((bits & (mask >> 1)) != 0)
                        v |= v | byte 2;

                    b[i++] = v;
                }

                if (i == BUFSIZE) {
                    if (sys->write(f, b, BUFSIZE) != BUFSIZE) return;
                    i = 0;
                }
            }
        }
    }
}
