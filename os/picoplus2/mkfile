<../../mkconfig

CONF=picoplus2.conf
CONFLIST=picoplus2.conf
DATA2S=data2texts
loadaddr=0x10000000
# Put data at the start of RAM.
dataaddr=0x20000000

SYSTARG=$OSTARG
OBJTYPE=thumb
INSTALLDIR=$ROOT/Inferno/$OBJTYPE/bin

<$ROOT/mkfiles/mkfile-$SYSTARG-$OBJTYPE

<| $SHELLNAME ../port/mkdevlist $CONF

# List the frozen modules in the configuration file, defining MODOBJ.
# This will be used by the mkfrozen script to create frozen module sources.
<| $SHELLNAME ../cortexm/listfrozen

OBJ=\
	l.$O\
	main.$O\
	clock.$O\
	dump.$O\
	thumb2.$O\
	trap.$O\
	fpi.$O\
	fpimem.$O\
	fpithumb2.$O\
	devices/clocks.$O\
	devices/sys.$O\
	devices/buttons.$O\
#	$IP\
	$DEVS\
#	$ETHERS\
	$LINKS\
	$PORT\
	$MISC\
	$OTHERS\
	$CONF.root.$O\
	frozen.$O\

LIBNAMES=${LIBS:%=lib%.a}
LIBDIRS=$LIBS

# Strip off the devices prefix of any object paths.
NOPREFIXOBJ=${OBJ:devices/%=%}

HFILES=\
	mem.h\
	dat.h\
	fns.h\
	../cortexm/fpi.h\
	../cortexm/thumb2.h\

# UART0 (Adafruit Feather RP2350)
MK_UART=0
MK_UART_TX=2
MK_UART_RX=3
MK_UART_FN=11

# UART1 (Pimoroni Pico Plus 2 and Raspberry Pi Pico 2W)
MK_UART=1
MK_UART_TX=4
MK_UART_RX=5
MK_UART_FN=2

ASFLAGS=$ASFLAGS -I../cortexm
CFLAGS=-wFV -I./include -I../cortexm -I$ROOT/include -I$ROOT/libinterp \
	-DMK_UART=$MK_UART -DMK_UART_TX=$MK_UART_TX -DMK_UART_RX=$MK_UART_RX -DMK_UART_FN=$MK_UART_FN \
	-DNO_KEYBOARD_IN_SWITCHER
LDFLAGS=-H0 -l -s -t -f
KERNDATE=`{$NDATE}

default:V: appl mkfreeze mkfrozendir frozen.h kernel uf2

kernel: $OBJ $CONF.c $CONF.root.h $LIBNAMES $MODOBJ
	$CC $CFLAGS -DKERNDATE=$KERNDATE $CONF.c
	$LD $LDFLAGS -o $target -R0 -T$loadaddr -D$dataaddr $NOPREFIXOBJ $CONF.$O $LIBFILES $MODOBJ

<../port/portmkfile

main.$O:	include/ureg.h

%.$O: ../cortexm/%.s
	$AS $ASFLAGS -I. -I../cortexm ../cortexm/$stem.s

%.$O: ../cortexm/%.c
	$CC $CFLAGS -I. -I../cortexm ../cortexm/$stem.c

%.fr.$O: frozen/%.s
	$AS $ASFLAGS -I. -I../cortexm -o $stem.fr.$O frozen/$stem.s

frozen/%.s:Q:
	# Source is generated by the freeze tool.

mkfreeze:V:
	(cd ../cortexm/freeze; mk $MKFLAGS install)

rmfreeze:V:
	(cd ../cortexm/freeze; mk $MKFLAGS clean)

mkfrozendir:V:
	mkdir -p frozen

rmfrozendir:V:
	rm -r frozen

frozen.h:V:
	$SHELLNAME ../cortexm/mkfrozen

%.fdis:Q:
	# $target is built by the frozen.c rule that builds frozen.h

EXTRADIS=\
	/dis/tiny/ls.dis\
	/dis/blink.dis\
	/dis/floattest.dis\
	/dis/textmandel.dis\

# Expand the targets to clean after the definition in portmkfile.
CLEANEXTRA=$CLEANEXTRA ${MODOBJ:%.fr.$O=frozen/%.s} frozen.h ${EXTRADIS:%=$ROOT/%} $ROOT/*.fdis kernel

$ROOT/dis/%.dis:V: appl/%.b
	limbo -o $target $prereq

$ROOT/dis/%.dis:V: $ROOT/appl/%.b
	limbo -o $target $prereq

appl:V:
	# Ensure that the local applications are built first.
	limbo -o $ROOT/dis/tiny/ls.dis $ROOT/appl/tiny/ls.b
	limbo -o $ROOT/dis/blink.dis appl/blink.b
	limbo -o $ROOT/dis/floattest.dis appl/floattest.b
	limbo -o $ROOT/dis/textmandel.dis appl/textmandel.b
	limbo -o $ROOT/dis/usbsh.dis appl/usbsh.b

uf2:V: kernel
	limbo -o $ROOT/dis/mkuf2.dis appl/mkuf2.b
	emu mkuf2 os/picoplus2/kernel os/picoplus2/inferno.uf2
